# -*- coding: utf-8 -*-
"""“wk1_assignment_01_chipotle.ipynb”的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gTQODQiQieE_2wGc_QsTYfBWg72KXqVJ

# CHIPOTLE DATA
* Use the orders.tsv file

## Get the Data File from Google Drive to Local
"""

dd_files = {
    'orders.tsv': '1PJx_SXu-H-kgjiERTasvFKVdfHwio6bI'
}

"""Hint: This is tab seperated file. Use
df = pd.read_csv('/tmp/orders.tsv', sep='\t')

## BASIC LEVEL

### PART 1: Read in the data with csv.reader() and store it in a list of lists called 'data'.
* `Hint: This is a TSV file, and csv.reader() needs to be told how to handle it.`
*       https://docs.python.org/2/library/csv.html
"""

!pip install -U -q PyDrive			## First time install
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)
#Download both files to cloud machine
for k,v in dd_files.items():
  downloaded = drive.CreateFile({'id': v}) # Get ID of file to download
  downloaded.GetContentFile('' + k)

!ls

import csv
with open('orders.tsv', mode='rU') as f:
    data = [row for row in csv.reader(f, delimiter='\t')]

"""### PART 2: Separate the header and data into two different lists."""

header = data[0]
order = data[1:]

header

order

"""## INTERMEDIATE LEVEL

### PART 3: Calculate the average price of an order.
* `Hint: Examine the data to see if the 'quantity' column is relevant to this calculation.`
* `Hint: Think carefully about the simplest way to do this!`
"""

#The quantity is not relevant in this case because we want to get the mean of the order not mean of each item.

total_order_number = len(set(id[0] for id in order)) #checking individual id
total_order_number

total_price = 0.0
for price in order:
  total_price = total_price+float(price[-1][1:-1])

total_price

price_average = total_price/total_order_number
price_average

"""### PART 4: Create a list (or set) of all unique sodas and soft drinks that they sell.
** Note: Just look for 'Canned Soda' and 'Canned Soft Drink', and ignore other drinks like 'Izze'.**
"""

drink_list =[]
for item in order:
  if 'Canned Soda' in item[2] or 'Canned Soft Drink' in item[2]:
    drink_list.append(item[3])
drink_list
drink_list = set(drink_list)
drink_list

"""## ADVANCED LEVEL

### PART 5: Calculate the average number of toppings per burrito.
** Note: Let's ignore the 'quantity' column to simplify this task.**
* `Hint: Think carefully about the easiest way to count the number of toppings!`
"""

burrito_count= 0
topping_count=0
for item in order:
  if 'Burrito' in item[2]:
    burrito_count = burrito_count+1
    topping_count = topping_count +(item[3].count(',')+1)# item[3] is not a list so I have to use ',' as the count then add another 1 because at least one topping. 
topping_count/burrito_count

"""### PART 6: Create a dictionary in which the keys represent chip orders and the values represent the total number of orders.
* Expected output: {'Chips and Roasted Chili-Corn Salsa': 18, ... }

** Note: Please take the 'quantity' column into account!**

* Optional: Learn how to use 'defaultdict' to simplify your code.
"""

food_list ={}

for item in order:
  if 'Chips' in item[2]:
    if item[2] not in food_list:
      food_list[ item[2]] =int(item[1])
    else:
      food_list[ item[2]] =int(item[1])+food_list[ item[2]]
food_list

"""There is a '-' in the key that will cause the count to be wrong even though they're basically the same food."""

food_list ={}

for item in order:
  if 'Chips' in item[2]:
    name = item[2].replace('-',' ')
    if name not in food_list:
      food_list[name] =int(item[1])
    else:
      food_list[name] =int(item[1])+food_list[name]
food_list

"""### BONUS: Think of a question about this data that interests you, and then answer it!

Sorted the most famous item.
"""

entire_list ={}

for item in order:
  name = item[2].replace('-',' ')
  if name not in entire_list:
      entire_list[name] =int(item[1])
  else:
      entire_list[name] =int(item[1])+entire_list[name]
sorted_by_value = sorted(entire_list.items(), key=lambda kv: kv[1],reverse=True)
sorted_by_value

